@startuml

package Service {
    class FileService << DBusService >> {
        +requestMetaData(file: String, parameters: dict)
        +cancelRequest(file: String)
        ---
        +signal requestFinished(file: String, data: dict)
    }

    class Queue {
        +enqueue(job: Job)
        +dequeue(job: Job)
        +takeNext() : Job
    }

    class Worker << Thread >> {
        +run()
    }

    abstract class Job {
        {abstract} +execute()
        +requestCount : int
    }

    FileService *-- Queue

    Queue o-- Job

    Worker --> Queue : Take
    Worker --> Job : Execute
}

package Library {

    interface FileInterface {
        +open(path : Optional[String] = None, mode : OpenMode = ReadOnly)
        +close()
        +flush()
        +getMetaData(virtual_path: String) : Dict[str, Any]
        +setMetaData(virtual_path: String, metadata: Dict[str, Any])
        +getStream(virtual_path : String) : BufferedIOBase
        +toByteArray(offset: int = 0, count: int = -1) : Bytes
    }

    class VirtualFile << ContextManager >> {
        -implementation : FileImplementation
    }

    abstract class FileImplementation {
    }

    FileInterface <|-- VirtualFile
    FileInterface <|-- FileImplementation

    VirtualFile *-- FileImplementation
    note on link
        VirtualFile creates a FileImplementation
        based on the path to the file it should
        open.
    end note

    FileImplementation <|-- GCodeFile
    FileImplementation <|-- ContainerFile
}

@enduml
